name: CI

env:
  OS_NAME_MAPPING_JSON: '{"ubuntu": "linux", "windows": "windows", "macos": "macos"}'

on:
  push:
    branches:
      - master
    tags:
      - 'imago-*'
  workflow_dispatch:
  pull_request:
  repository_dispatch:

jobs:
  build_x86_64:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos, ubuntu, windows ]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          lfs: false
          fetch-depth: 500
      - name: Git fetch tags
        run: git fetch --tags -f
      - name: Build Linux
        if: ${{ matrix.os == 'ubuntu' }}
        uses: docker://epmlsop/buildpack-centos7:latest
        with:
          args: >
            /bin/sh -c "
            mkdir build &&
            cd build &&
            cmake .. &&
            cmake --build . --config Release --target imago -- -j $(nproc) &&
            cmake --build . --config Release --target imago-python -- -j $(nproc) &&
            python3 -m pip install epam.indigo Pillow==8.4.0 &&
            cd ..
            python3 tools/imago/tests/run.py
            "
      - name: Build macOS
        if: ${{ matrix.os == 'macos' }}
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release --target imago -- -j $(sysctl -n hw.logicalcpu)
          cmake --build . --config Release --target imago-python -- -j $(sysctl -n hw.logicalcpu)
          python3 -m pip install epam.indigo
          cd ..
          python3 tools/imago/tests/run.py
      - name: Build Windows
        if: ${{ matrix.os == 'windows' }}
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config Release --target imago
          cmake --build . --config Release --target imago-python
          python3 -m pip install epam.indigo
          cd ..
          python3 tools/imago/tests/run.py
      - name: Publish Test Report
        if: always()
        uses: mikepenz/action-junit-report@v1
        with:
          report_paths: 'report.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          check_name: "${{ matrix.os }}-test_report"
