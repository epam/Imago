/****************************************************************************
 * Copyright (C) 2009-2010 GGA Software Services LLC
 * 
 * This file is part of Imago toolkit.
 * 
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 3 as published by the Free Software
 * Foundation and appearing in the file LICENSE.GPL included in the
 * packaging of this file.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 ***************************************************************************/

package com.gga;

import com.gga.DocumentHandling.DocumentPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import javax.swing.UIManager.*;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;

import com.sun.jna.*;
import com.sun.jna.ptr.IntByReference;
import java.awt.Image;
import java.nio.Buffer;
import java.nio.ByteBuffer;

public class Ego extends javax.swing.JFrame {

    public interface iSMILES extends Library
    {
        public Pointer loadAndProcessJPGImage( String filename, IntByReference width, IntByReference height);
    }
    
    /** Creates new form Main */
    public Ego() {

        IsmilesHelper ismh = new IsmilesHelper();

        try {
            ism = (iSMILES)Native.loadLibrary(ismh.getiSMILESPath(jarDir + File.separator + "lib"),
                iSMILES.class);
        }
        catch (Exception e) {
        }

        initComponents();
        setVisible(true);
        setTitle("Ego");

        Dimension screen_size = Toolkit.getDefaultToolkit().getScreenSize();

        setLocation((screen_size.width - getWidth()) / 2,
                    (screen_size.height - getHeight()) / 2);
//        setSize(Toolkit.getDefaultToolkit().getScreenSize());

        moleculePanel = (MoleculePanel)jMoleculePanel;
        documentPanel = (DocumentPanel)jDocumentPanel;
        filteredImagePanel = (ImagePanel)jFilteredImagePanel;
        
        documentPanel.setParent(this);
        
        try {
            imago.setLogCallback(new Imago.ImagoLogCallback() {
                @Override
                    public void log(String str) {
                        addTextToLog(str);
                    }
                });
        } catch (Exception e) {
            System.out.println(e.getMessage());
            //TODO: Broken log?
        }

        moleculePanel.yesButton.addActionListener(new ActionListener() {
         @Override
            public void actionPerformed(ActionEvent arg0) {
                try
                {
                   imago.nextConfig();
                }
                catch (Exception e)  {
                   // TODO: handle it somehow
                }
                jMainTabbedPane.setSelectedIndex(1);
                moleculePanel.updateText(imago);
                recognize();
            }
        });

        moleculePanel.updateText(imago);

        jMainTabbedPane.setEnabledAt(0, false);
        jMainTabbedPane.setEnabledAt(1, false);
        jMainTabbedPane.setEnabledAt(2, false);
        jMainTabbedPane.setEnabledAt(3, false);
               
        jNoResultPanel = new JPanel(new BorderLayout());
        jNoResultLabel = new JLabel("Unfortunately, Imago couldn't recognize selected image.", JLabel.CENTER);
        jNoResultPanel.add(jNoResultLabel, BorderLayout.CENTER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMainToolBar = new javax.swing.JToolBar();
        jOpenButton = new javax.swing.JButton();
        jSaveButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jPreviousDocumentButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jRecognizeButton = new javax.swing.JButton();
        jCopyButton = new javax.swing.JButton();
        jSketcherButton = new javax.swing.JButton();
        jMainTabbedPane = new javax.swing.JTabbedPane();
        jDocumentPanel = new DocumentPanel();
        jFilteredImagePanel = new ImagePanel();
        jLogScollPane = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        jMoleculePanel = new MoleculePanel();
        jMainMenuBar = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        jOpenMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jQuitMenuItem = new javax.swing.JMenuItem();
        jViewMenu = new javax.swing.JMenu();
        jNavigateMenu = new javax.swing.JMenu();
        jFirstPageMenuItem = new javax.swing.JMenuItem();
        jNextPageMenuItem = new javax.swing.JMenuItem();
        jPreviousPageMenuItem = new javax.swing.JMenuItem();
        jLastPageMenuItem = new javax.swing.JMenuItem();
        jZoomMenu = new javax.swing.JMenu();
        jZoomInMenuItem = new javax.swing.JMenuItem();
        jZoomOutMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jActualSizeMenuItem = new javax.swing.JMenuItem();
        jFitWidthMenuItem = new javax.swing.JMenuItem();
        jFitHeightMenuItem = new javax.swing.JMenuItem();
        jPreviousDocumentMenuItem = new javax.swing.JMenuItem();
        jMoleculeMenu = new javax.swing.JMenu();
        jRecognizeMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jSaveMenuItem = new javax.swing.JMenuItem();
        jCopyMenuItem = new javax.swing.JMenuItem();
        jSketcherMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMainToolBar.setFloatable(false);
        jMainToolBar.setAlignmentX(0.0F);
        jMainToolBar.setMaximumSize(new java.awt.Dimension(159, 41));

        jOpenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/document-open.png"))); // NOI18N
        jOpenButton.setToolTipText("Open document");
        jOpenButton.setFocusable(false);
        jOpenButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jOpenButton.setMaximumSize(new java.awt.Dimension(45, 43));
        jOpenButton.setMinimumSize(new java.awt.Dimension(45, 43));
        jOpenButton.setPreferredSize(new java.awt.Dimension(45, 43));
        jOpenButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenButtonActionPerformed(evt);
            }
        });
        jMainToolBar.add(jOpenButton);

        jSaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/document-save.png"))); // NOI18N
        jSaveButton.setToolTipText("Save molecule");
        jSaveButton.setEnabled(false);
        jSaveButton.setFocusable(false);
        jSaveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jSaveButton.setMaximumSize(new java.awt.Dimension(45, 43));
        jSaveButton.setMinimumSize(new java.awt.Dimension(45, 43));
        jSaveButton.setPreferredSize(new java.awt.Dimension(45, 43));
        jSaveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveButtonActionPerformed(evt);
            }
        });
        jMainToolBar.add(jSaveButton);
        jMainToolBar.add(jSeparator1);

        jPreviousDocumentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/edit-undo.png"))); // NOI18N
        jPreviousDocumentButton.setToolTipText("Recover original document");
        jPreviousDocumentButton.setEnabled(false);
        jPreviousDocumentButton.setFocusable(false);
        jPreviousDocumentButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPreviousDocumentButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jPreviousDocumentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPreviousDocumentButtonActionPerformed(evt);
            }
        });
        jMainToolBar.add(jPreviousDocumentButton);
        jMainToolBar.add(jSeparator4);

        jRecognizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/start-here.png"))); // NOI18N
        jRecognizeButton.setToolTipText("Recognize");
        jRecognizeButton.setEnabled(false);
        jRecognizeButton.setFocusable(false);
        jRecognizeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRecognizeButton.setMaximumSize(new java.awt.Dimension(45, 43));
        jRecognizeButton.setMinimumSize(new java.awt.Dimension(45, 43));
        jRecognizeButton.setPreferredSize(new java.awt.Dimension(45, 43));
        jRecognizeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jRecognizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRecognizeButtonActionPerformed(evt);
            }
        });
        jMainToolBar.add(jRecognizeButton);

        jCopyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/edit-copy.png"))); // NOI18N
        jCopyButton.setToolTipText("Copy molecule to clipboard");
        jCopyButton.setEnabled(false);
        jCopyButton.setFocusable(false);
        jCopyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jCopyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopyButtonActionPerformed(evt);
            }
        });
        jMainToolBar.add(jCopyButton);

        jSketcherButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/edit-find-replace.png"))); // NOI18N
        jSketcherButton.setToolTipText("Open molecule in MarvinSketch");
        jSketcherButton.setEnabled(false);
        jSketcherButton.setFocusable(false);
        jSketcherButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jSketcherButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jSketcherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSketcherButtonActionPerformed(evt);
            }
        });
        jMainToolBar.add(jSketcherButton);

        /*
        jDocumentPanel.setLayout(null);
        */
        jMainTabbedPane.addTab("Document", jDocumentPanel);

        /*
        jFilteredImagePanel.setLayout(null);
        */
        jMainTabbedPane.addTab("Filtered Image", jFilteredImagePanel);

        logArea.setColumns(20);
        logArea.setEditable(false);
        logArea.setRows(5);
        jLogScollPane.setViewportView(logArea);

        jMainTabbedPane.addTab("Log", jLogScollPane);

        /*
        jMoleculePanel.setLayout(null);
        */
        jMainTabbedPane.addTab("Molecule", jMoleculePanel);

        jFileMenu.setMnemonic('F');
        jFileMenu.setText("File");

        jOpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jOpenMenuItem.setMnemonic('O');
        jOpenMenuItem.setText("Open");
        jOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jOpenMenuItem);
        jFileMenu.add(jSeparator3);

        jQuitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jQuitMenuItem.setMnemonic('Q');
        jQuitMenuItem.setText("Quit");
        jQuitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jQuitMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jQuitMenuItem);

        jMainMenuBar.add(jFileMenu);

        jViewMenu.setMnemonic('V');
        jViewMenu.setText("View");

        jNavigateMenu.setMnemonic('N');
        jNavigateMenu.setText("Navigate");
        jNavigateMenu.setEnabled(false);

        jFirstPageMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, java.awt.event.InputEvent.CTRL_MASK));
        jFirstPageMenuItem.setMnemonic('F');
        jFirstPageMenuItem.setText("First page");
        jFirstPageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFirstPageMenuItemActionPerformed(evt);
            }
        });
        jNavigateMenu.add(jFirstPageMenuItem);

        jNextPageMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_RIGHT, java.awt.event.InputEvent.CTRL_MASK));
        jNextPageMenuItem.setMnemonic('N');
        jNextPageMenuItem.setText("Next page");
        jNextPageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNextPageMenuItemActionPerformed(evt);
            }
        });
        jNavigateMenu.add(jNextPageMenuItem);

        jPreviousPageMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_LEFT, java.awt.event.InputEvent.CTRL_MASK));
        jPreviousPageMenuItem.setMnemonic('P');
        jPreviousPageMenuItem.setText("Previous page");
        jPreviousPageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPreviousPageMenuItemActionPerformed(evt);
            }
        });
        jNavigateMenu.add(jPreviousPageMenuItem);

        jLastPageMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_END, java.awt.event.InputEvent.CTRL_MASK));
        jLastPageMenuItem.setMnemonic('L');
        jLastPageMenuItem.setText("Last page");
        jLastPageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLastPageMenuItemActionPerformed(evt);
            }
        });
        jNavigateMenu.add(jLastPageMenuItem);

        jViewMenu.add(jNavigateMenu);

        jZoomMenu.setMnemonic('Z');
        jZoomMenu.setText("Zoom");
        jZoomMenu.setEnabled(false);

        jZoomInMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, java.awt.event.InputEvent.CTRL_MASK));
        jZoomInMenuItem.setMnemonic('I');
        jZoomInMenuItem.setText("Zoom In");
        jZoomInMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jZoomInMenuItemActionPerformed(evt);
            }
        });
        jZoomMenu.add(jZoomInMenuItem);

        jZoomOutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SUBTRACT, java.awt.event.InputEvent.CTRL_MASK));
        jZoomOutMenuItem.setMnemonic('O');
        jZoomOutMenuItem.setText("Zoom Out");
        jZoomOutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jZoomOutMenuItemActionPerformed(evt);
            }
        });
        jZoomMenu.add(jZoomOutMenuItem);
        jZoomMenu.add(jSeparator5);

        jActualSizeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.CTRL_MASK));
        jActualSizeMenuItem.setMnemonic('A');
        jActualSizeMenuItem.setText("Actual Size");
        jActualSizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jActualSizeMenuItemActionPerformed(evt);
            }
        });
        jZoomMenu.add(jActualSizeMenuItem);

        jFitWidthMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.CTRL_MASK));
        jFitWidthMenuItem.setMnemonic('W');
        jFitWidthMenuItem.setText("Fit Width");
        jFitWidthMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFitWidthMenuItemActionPerformed(evt);
            }
        });
        jZoomMenu.add(jFitWidthMenuItem);

        jFitHeightMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.CTRL_MASK));
        jFitHeightMenuItem.setMnemonic('H');
        jFitHeightMenuItem.setText("Fit Height");
        jFitHeightMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFitHeightMenuItemActionPerformed(evt);
            }
        });
        jZoomMenu.add(jFitHeightMenuItem);

        jViewMenu.add(jZoomMenu);

        jPreviousDocumentMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, java.awt.event.InputEvent.CTRL_MASK));
        jPreviousDocumentMenuItem.setText("Recover original document");
        jPreviousDocumentMenuItem.setEnabled(false);
        jPreviousDocumentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPreviousDocumentMenuItemActionPerformed(evt);
            }
        });
        jViewMenu.add(jPreviousDocumentMenuItem);

        jMainMenuBar.add(jViewMenu);

        jMoleculeMenu.setMnemonic('M');
        jMoleculeMenu.setText("Molecule");

        jRecognizeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jRecognizeMenuItem.setMnemonic('R');
        jRecognizeMenuItem.setText("Recognize");
        jRecognizeMenuItem.setEnabled(false);
        jRecognizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRecognizeMenuItemActionPerformed(evt);
            }
        });
        jMoleculeMenu.add(jRecognizeMenuItem);
        jMoleculeMenu.add(jSeparator2);

        jSaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jSaveMenuItem.setMnemonic('S');
        jSaveMenuItem.setText("Save");
        jSaveMenuItem.setEnabled(false);
        jSaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveMenuItemActionPerformed(evt);
            }
        });
        jMoleculeMenu.add(jSaveMenuItem);

        jCopyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jCopyMenuItem.setMnemonic('C');
        jCopyMenuItem.setText("Copy to clipboard");
        jCopyMenuItem.setEnabled(false);
        jCopyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopyMenuItemActionPerformed(evt);
            }
        });
        jMoleculeMenu.add(jCopyMenuItem);

        jSketcherMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jSketcherMenuItem.setMnemonic('M');
        jSketcherMenuItem.setText("Open in MarvinSketch");
        jSketcherMenuItem.setEnabled(false);
        jSketcherMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSketcherMenuItemActionPerformed(evt);
            }
        });
        jMoleculeMenu.add(jSketcherMenuItem);

        jMainMenuBar.add(jMoleculeMenu);

        setJMenuBar(jMainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jMainToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jMainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jMainToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jMainTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setFileFromDialog() {
        String path = ".";
        if (curFile != null)
            path = curFile.getParent();
        JFileChooser jfc = new JFileChooser(path);
        jfc.setDialogTitle("Select document");
        jfc.setFileFilter(new FileNameExtensionFilter("Documents (png, jpg, gif" +
                ", pdf, tif, tiff)", "png", "jpg", "gif", "pdf", "tif", "tiff"));
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try
            {
                setFile(jfc.getSelectedFile());
            }
            catch (Exception e) {

            }
        }
    }
    
    public void toggleNavigateItems(boolean value) {
        jNavigateMenu.setEnabled(value);
        jZoomMenu.setEnabled(value);
    }

    public void toggleRecognizeItems(boolean value) {
        jRecognizeButton.setEnabled(value);
        jRecognizeMenuItem.setEnabled(value);
    }

    public void toggleAfterRecognitionItems(boolean value) {
        jCopyMenuItem.setEnabled(value);
        jCopyButton.setEnabled(value);

        jSaveMenuItem.setEnabled(value);
        jSaveButton.setEnabled(value);

        jSketcherMenuItem.setEnabled(value);
        jSketcherButton.setEnabled(value);
    }

    public void toggleAfterSelectionItems(boolean value) {
        jPreviousDocumentButton.setEnabled(value);
        jPreviousDocumentMenuItem.setEnabled(value);
        
        if (value == true) {
            toggleRecognizeItems(true);
        }
    }

    private void setFile(File file) {

        toggleAfterRecognitionItems(false);
        toggleAfterSelectionItems(false);
        toggleNavigateItems(true);

        if (!documentPanel.checkFile(file))
            return;
        
        try
        {
           imago.setConfig(0);
        }
        catch (Exception e) {
            System.out.println("asdfs");
        }

        moleculePanel.updateText(imago);
        setTitle("Ego: " + file.getName());

        if (documentPanel.isPDF(file) || documentPanel.isTIF(file)) {
            toggleRecognizeItems(false);
        }
        else {
            toggleRecognizeItems(true);
        }
        
        curFile = file;

        jMainTabbedPane.setEnabledAt(0, true);
        jMainTabbedPane.setSelectedIndex(0);

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                documentPanel.setFile(curFile);
            }
        });

        String ext = documentPanel.getFileExtension(file);

        if ("jpg".equals(ext))
        {
            documentPanel.setCareful();

            IntByReference w = new IntByReference(),
                    h = new IntByReference();
            Pointer jpg_image =
                    ism.loadAndProcessJPGImage(file.getAbsoluteFile().toString(), w, h);

            byte[] arr = jpg_image.getByteArray(0, w.getValue() * h.getValue());

            imago.loadGreyscaleRawImage(arr, w.getValue(), h.getValue());

            jpg_handwriting = true;
            BufferedImage filtered = new BufferedImage(w.getValue(), h.getValue(), BufferedImage.TYPE_BYTE_GRAY);

            for (int i = 0; i < w.getValue(); i++)
                for (int j = 0; j < h.getValue(); j++)
                    filtered.setRGB(i, j, arr[j * w.getValue() + i]);

            filteredImagePanel.setImage(filtered);
            jMainTabbedPane.setEnabledAt(1, true);
            //jMainTabbedPane.setEnabledAt(2, true);*/
        }
    }
    
    private void showNoResultMessage() {
        if (!jNoResultPanel.equals(jMainTabbedPane.getComponentAt(2)))
            jMainTabbedPane.setComponentAt(2, jNoResultPanel);
        jMainTabbedPane.setSelectedIndex(2);
    }

    private void recognize() {
        if (recognizing)
            return;       

        jMainTabbedPane.setEnabledAt(2, true);
        jMainTabbedPane.setSelectedIndex(2);

        logArea.setText("");
        final Ego thiz = this;

        new Thread() {
            @Override
            public void run() {
                recognizing = true;
                String molfile;
                for (int i = 0; i < Imago.configsCount; i++) {
                    molfile = "";
                    try {
                        BufferedImage img = null;
                        if (!jpg_handwriting)
                        {
                            img = documentPanel.getSelectedSubimage(null);

                            if (img == null) {
                                throw new Exception("Highlight a molecule first please.");
                            }
                        }

                        //MyDialog jd = new MyDialog(thiz, true, img);
                        //jd.setVisible(true);
                        
                        try {
                            if (!jpg_handwriting)
                                imago.loadBufImage(img);
                        } catch (Exception e) {
                            System.out.println(e.getMessage());
                        }

                        imago.recognize();
                        molfile = imago.getResult();

                        if (molfile.equals("")) {
                            moleculePanel.clear();
                        } else {
                            try {
                                addTextToLog("Rendering molecule\n");
                                moleculePanel.setMolecule(molfile);

                                addTextToLog("Molecule rendered");
                                moleculePanel.updateText(imago);

                                toggleAfterRecognitionItems(true);
                                
                                //if (!moleculePanel.equals(jTabbedPane1.getComponentAt(tabs[2])))
                                //    jTabbedPane1.setComponentAt(tabs[2], moleculePanel);
                                jMainTabbedPane.setEnabledAt(2, true);
                                jMainTabbedPane.setEnabledAt(3, true);
                                jMainTabbedPane.setSelectedIndex(3);

                                //jTabbedPane1.setEnabledAt(tabs[0], false);
                                
                            } catch (Exception e) {
                                System.out.println(e.getMessage());
                                if (i < Imago.configsCount) {
                                    throw new Imago.NoResultException();
                                }
                                else {
                                    showNoResultMessage();
                                }
                            }
                        }
                    } catch(Imago.NoResultException e) {
                        if (e.getMessage() != null)
                            System.out.println(e.getMessage());
                        if (i == Imago.configsCount - 1) {
                            showNoResultMessage();
                        }
                        else {
                            try
                            {
                                imago.nextConfig();
                            }
                            catch (Exception ee) {
                                // TODO: handle it somehow
                            }
                            logArea.setText("Imago is trying to recognize image with another config" + '\n');
                            continue;
                        }
                    } catch(Exception e) {
                        JOptionPane.showMessageDialog(thiz, e.getMessage());
                        jMainTabbedPane.setSelectedIndex(0); //TODO: check this
                    }
                    break;
                }
                recognizing = false;
            }
        }.start();
    }

    private void jQuitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jQuitMenuItemActionPerformed
        this.dispose();
    }//GEN-LAST:event_jQuitMenuItemActionPerformed

    private void jOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenButtonActionPerformed
        setFileFromDialog();
    }//GEN-LAST:event_jOpenButtonActionPerformed

    private void jOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenMenuItemActionPerformed
        setFileFromDialog();
    }//GEN-LAST:event_jOpenMenuItemActionPerformed

    private void jRecognizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRecognizeMenuItemActionPerformed
        recognize();
    }//GEN-LAST:event_jRecognizeMenuItemActionPerformed

    private void jSaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveMenuItemActionPerformed
        moleculePanel.saveMolecule();
    }//GEN-LAST:event_jSaveMenuItemActionPerformed

    private void jCopyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopyMenuItemActionPerformed
        moleculePanel.copyToClipboard();
    }//GEN-LAST:event_jCopyMenuItemActionPerformed

    private void jSketcherMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSketcherMenuItemActionPerformed
        final Ego thiz = this;

        try {
            new Sketcher(thiz, moleculePanel.mol);
        }
        catch (java.lang.UnsatisfiedLinkError e) {
        }
    }//GEN-LAST:event_jSketcherMenuItemActionPerformed

    private void jFirstPageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFirstPageMenuItemActionPerformed
        documentPanel.setFirstPage();
    }//GEN-LAST:event_jFirstPageMenuItemActionPerformed

    private void jNextPageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNextPageMenuItemActionPerformed
        documentPanel.setNextPage();
    }//GEN-LAST:event_jNextPageMenuItemActionPerformed

    private void jPreviousPageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreviousPageMenuItemActionPerformed
        documentPanel.setPrevPage();
    }//GEN-LAST:event_jPreviousPageMenuItemActionPerformed

    private void jLastPageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLastPageMenuItemActionPerformed
        documentPanel.setLastPage();
    }//GEN-LAST:event_jLastPageMenuItemActionPerformed

    private void jZoomInMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jZoomInMenuItemActionPerformed
        documentPanel.increaseScale();
    }//GEN-LAST:event_jZoomInMenuItemActionPerformed

    private void jZoomOutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jZoomOutMenuItemActionPerformed
        documentPanel.decreaseScale();
    }//GEN-LAST:event_jZoomOutMenuItemActionPerformed

    private void jActualSizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jActualSizeMenuItemActionPerformed
        documentPanel.setActualSize();
    }//GEN-LAST:event_jActualSizeMenuItemActionPerformed

    private void jFitWidthMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFitWidthMenuItemActionPerformed
        documentPanel.fitWidth();
    }//GEN-LAST:event_jFitWidthMenuItemActionPerformed

    private void jFitHeightMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFitHeightMenuItemActionPerformed
        documentPanel.fitHeight();
    }//GEN-LAST:event_jFitHeightMenuItemActionPerformed

    private void jRecognizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRecognizeButtonActionPerformed
        recognize();
    }//GEN-LAST:event_jRecognizeButtonActionPerformed

    private void jSketcherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSketcherButtonActionPerformed
        final Ego thiz = this;

        try {
            new Sketcher(thiz, moleculePanel.mol);
        }
        catch (java.lang.UnsatisfiedLinkError e) {
            
        }
    }//GEN-LAST:event_jSketcherButtonActionPerformed

    private void jSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveButtonActionPerformed
        moleculePanel.saveMolecule();
    }//GEN-LAST:event_jSaveButtonActionPerformed

    private void jPreviousDocumentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreviousDocumentButtonActionPerformed
        documentPanel.recoverPreviousDocument();
        jMainTabbedPane.setSelectedIndex(0);
    }//GEN-LAST:event_jPreviousDocumentButtonActionPerformed

    private void jPreviousDocumentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPreviousDocumentMenuItemActionPerformed
        documentPanel.recoverPreviousDocument();
        jMainTabbedPane.setSelectedIndex(0);
    }//GEN-LAST:event_jPreviousDocumentMenuItemActionPerformed

    private void jCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopyButtonActionPerformed
        moleculePanel.copyToClipboard();
    }//GEN-LAST:event_jCopyButtonActionPerformed

    public void addTextToLog(String text) {
        logArea.setText(logArea.getText() + text);
    }

    public static String getPathToJarfileDir(Class classToUse) {
        String url = classToUse.getResource("/" + classToUse.getName().replaceAll("\\.", "/") + ".class").toString();
        url = url.substring(4).replaceFirst("/[^/]+\\.jar!.*$", "/");
        try {
            File dir = new File(new URL(url).toURI());
            url = dir.getAbsolutePath();
        } catch (MalformedURLException mue) {
            url = null;
        } catch (URISyntaxException ue) {
            url = null;
        }
        return url;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        LookAndFeelInfo infos[] = UIManager.getInstalledLookAndFeels();

        try
        {
            boolean nimbus_found = false;

            for (int i = 0; i != infos.length; i++)
            {
                if (infos[i].getName().equals("Nimbus")) {
                    UIManager.setLookAndFeel(infos[i].getClassName());
                    nimbus_found = true;
                    break;
                }
            }
            
            if (!nimbus_found) {
                String os = System.getProperty("os.name");

                if (os.indexOf("Win") >= 0) {
                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
                }
            }
        }
        catch (Exception e)
        {
        }
        
        final String filename;
        if (args.length > 0)
            filename = args[0];
        else
            filename = null;
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                Ego e = new Ego();
                if (filename != null)
                    e.setFile(new File(filename));
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jActualSizeMenuItem;
    private javax.swing.JButton jCopyButton;
    private javax.swing.JMenuItem jCopyMenuItem;
    private javax.swing.JPanel jDocumentPanel;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JPanel jFilteredImagePanel;
    private javax.swing.JMenuItem jFirstPageMenuItem;
    private javax.swing.JMenuItem jFitHeightMenuItem;
    private javax.swing.JMenuItem jFitWidthMenuItem;
    private javax.swing.JMenuItem jLastPageMenuItem;
    private javax.swing.JScrollPane jLogScollPane;
    private javax.swing.JMenuBar jMainMenuBar;
    private javax.swing.JTabbedPane jMainTabbedPane;
    private javax.swing.JToolBar jMainToolBar;
    private javax.swing.JMenu jMoleculeMenu;
    private javax.swing.JPanel jMoleculePanel;
    private javax.swing.JMenu jNavigateMenu;
    private javax.swing.JMenuItem jNextPageMenuItem;
    private javax.swing.JButton jOpenButton;
    private javax.swing.JMenuItem jOpenMenuItem;
    private javax.swing.JButton jPreviousDocumentButton;
    private javax.swing.JMenuItem jPreviousDocumentMenuItem;
    private javax.swing.JMenuItem jPreviousPageMenuItem;
    private javax.swing.JMenuItem jQuitMenuItem;
    private javax.swing.JButton jRecognizeButton;
    private javax.swing.JMenuItem jRecognizeMenuItem;
    private javax.swing.JButton jSaveButton;
    private javax.swing.JMenuItem jSaveMenuItem;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JButton jSketcherButton;
    private javax.swing.JMenuItem jSketcherMenuItem;
    private javax.swing.JMenu jViewMenu;
    private javax.swing.JMenuItem jZoomInMenuItem;
    private javax.swing.JMenu jZoomMenu;
    private javax.swing.JMenuItem jZoomOutMenuItem;
    private javax.swing.JTextArea logArea;
    // End of variables declaration//GEN-END:variables

    private MoleculePanel moleculePanel;
    private DocumentPanel documentPanel;
    private ImagePanel filteredImagePanel;
    private File curFile;
    private javax.swing.JPanel jNoResultPanel;
    private javax.swing.JLabel jNoResultLabel;

    private iSMILES ism;
    
    private boolean recognizing = false;
    private static final Imago imago;
    private boolean jpg_handwriting = false;
    public static String jarDir = getPathToJarfileDir(Ego.class);

    private class MyDialog extends JDialog {

        BufferedImage _img;

        public MyDialog(JFrame frm, boolean b, BufferedImage img) {
            super(frm, b);
            setSize(400, 400);
            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            _img = img;
        }


        @Override
        public void paint(Graphics grphcs) {
            super.paint(grphcs);
            
            grphcs.drawImage(_img, 0, 0, this);
        }

    }

    static {
        if (jarDir == null)
            jarDir = ".";

        //DEBUG
        //Uncomment this line if you want to run Ego from NetBeans
        //jarDir = "../output/release/ego";
        ///////
        imago = new Imago(jarDir + File.separator + "lib");
    }
}
