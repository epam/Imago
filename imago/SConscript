#IMAGO
import os, os.path, glob;

#source_files = glob.glob('src/*.cpp')

Import('env')

source_files = """
src/static_object.cpp
src/filter.cpp
src/wedge_bond_extractor.cpp
src/graph_extractor.cpp
src/exception.cpp
src/output.cpp
src/scanner.cpp
src/molecule.cpp
src/png_loader.cpp
src/font.cpp
src/label_logic.cpp
src/log.cpp
src/image_utils.cpp
src/molfile_saver.cpp
src/segmentator.cpp
src/vec2d.cpp
src/approximator.cpp
src/label_combiner.cpp
src/graphics_detector.cpp
src/session_manager.cpp
src/recognition_settings.cpp
src/png_saver.cpp
src/thin_filter2.cpp
src/binarizer.cpp
src/chemical_structure_recognizer.cpp
src/convolver.cpp
src/segment.cpp
src/image.cpp
src/fourier_descriptors_extractor.cpp
src/separator.cpp
src/image_draw_utils.cpp
src/algebra.cpp
src/double_bond_maker.cpp
src/triple_bond_maker.cpp
src/multiple_bond_checker.cpp
src/segments_graph.cpp
src/skeleton.cpp
src/rectangle.cpp
src/character_recognizer.cpp
""".split()

source_files = filter(lambda x: not x.startswith('#'), source_files)

if env['PLATFORM'] == 'win32':
   source_files.append('src/thread_local_win.cpp')
   source_files.append('src/lock_win.cpp')
else:
   source_files.append('src/thread_local_posix.cpp')
   source_files.append('src/lock_posix.cpp')

#for i in source_files:
#   print i

include_dirs = [
'src/',
'../',
]

build_dir = env['BUILDDIR']

imago_objs = []

for filename in source_files:
   base = os.path.splitext(os.path.basename(filename))[0]
   imago_objs.append(env.SharedObject(target = build_dir + base, source = filename))

libimago = env.StaticLibrary(target = build_dir + 'imago_lib', source = imago_objs)
libimagodll = env.SharedLibrary(target = build_dir + 'imago', source = imago_objs)

Export('env')
Export('libimagodll')
Export('libimago')

   
